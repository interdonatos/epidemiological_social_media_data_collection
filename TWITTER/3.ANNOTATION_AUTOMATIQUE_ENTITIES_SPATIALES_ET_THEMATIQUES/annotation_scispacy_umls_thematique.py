# -*- coding: utf-8 -*-
"""annotation_scispacy_umls_thematique.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dONRtgwyq2Kh8tMF94a43YIMZ1cI1HMK
"""

!pip install spacy
!pip install scispacy

!pip install https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/releases/v0.4.0/en_core_sci_md-0.4.0.tar.gz

!pip install https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/releases/v0.4.0/en_ner_bc5cdr_md-0.4.0.tar.gz

!pip install spacy-transformers

!pip install https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/releases/v0.4.0/en_core_sci_scibert-0.4.0.tar.gz

import scispacy
import spacy
import en_ner_bc5cdr_md
import en_core_sci_scibert
import en_core_sci_md
from tqdm import tqdm
import os, glob

from scipy.sparse import load_npz
from scispacy.umls_utils import UmlsKnowledgeBase
kb = UmlsKnowledgeBase()
st = kb.semantic_type_tree

import spacy_transformers
import re
nlp = spacy.load("en_core_sci_md")
#text ="Penicillin-resistant strains of Staphylococcus aureus emerged shortly after the introduction of the antibiotic in the early 1940s. [...] They expressed a β-lactamase that hydrolysed the critical β-lactam bond and destroyed the drug's antibacterial activity. [...] Mechanism of action of and resistance to penicillin [...]. The aminoglycoside class of antibiotics consists of many different agents. In the United States, gentamicin, tobramycin, amikacin, plazomicin, streptomycin, neomycin, and paromomycin are approved by the US Food and Drug Administration (FDA) and are available for clinical use" 
#text = "Avian influenza ,HPAI H5N8, reported by UK and Croatia,  in seal, fox, and wild bird, to #OIE "
chemin_dossier_articles_spacy="/content/dossier_transcriptions2411"
folder_path = (chemin_dossier_articles_spacy)
for filename in tqdm(glob.glob(os.path.join(folder_path, '*.txt'))):
  text=open(filename,encoding="utf-8").read()
  open(filename,'a',encoding="utf-8").write(', "Thematic Entities": "')

  text=re.sub('\\ "','\"',text)
  text=re.sub('}\.','}',text)
  
  doc = nlp(text)
  #print(list(doc.sents))
  entity_spans = []
  for ent in doc.ents:
      # print(ent.label_, ent.text)
      entity_spans.append(ent.text)
      #print(ent)

  annotations = []
  for ent_id, entity_span in enumerate(entity_spans):
    try:
      cuis = kb.alias_to_cuis[entity_span]
      #print(cuis)
      for cui in cuis:
          umls_ent = kb.cui_to_entity[cui]
          cid = umls_ent.concept_id
          pname = umls_ent.canonical_name
          stycodes = [(stycode, st.get_canonical_name(stycode)) 
                      for stycode in umls_ent.types]
          for stycode, styname in stycodes:
            annotations.append((ent_id, entity_span, cid, pname, stycode, styname))
            #liste_entities=[]
            if((styname=="Disease or Syndrome") or (styname=="Sign or Symptom") or (styname=="Virus")):
              entity=entity_span,styname
              open(filename,'a',encoding="utf-8").write(str(entity))
              #print(entity)
              #print(type(entity))
              #liste_entities.append(entity)
              print(entity)
              #liste_entities.append(entity)
              #open(filename,'a',encoding="utf-8").write(str(entity))
              print("ok")
            #liste_entities.append(entity)
            #print(liste_entities)
            #liste_entities=set(liste_entities)
            #print(liste_entities)
                          
            #open(filename,'a',encoding="utf-8").write(entity) #les articles sont tagués par spacy et écrits à la fin des fichiers 
              
                #print(entity_span,styname)
      
    except:
      continue
      #print(entity_span,"Entity")
  print("ok2")
  open(filename,'a',encoding="utf-8").write('"},')

import re
for filename in tqdm(glob.glob(os.path.join(folder_path, '*.txt'))):
  text=open(filename,encoding="utf-8").read()
  text=re.sub('\\ "','\"',text)
  text=re.sub('}.','}',text)
  open(filename,'w',encoding="utf-8").write(text)

"""annotations = []
for ent_id, entity_span in enumerate(entity_spans):
  try:
    cuis = kb.alias_to_cuis[entity_span]
    #print(cuis)
    for cui in cuis:
        umls_ent = kb.cui_to_entity[cui]
        cid = umls_ent.concept_id
        pname = umls_ent.canonical_name
        stycodes = [(stycode, st.get_canonical_name(stycode)) 
                    for stycode in umls_ent.types]
        for stycode, styname in stycodes:
            annotations.append((ent_id, entity_span, 
                                cid, pname, 
                                stycode, styname))
            if((styname=="Disease or Syndrome") or (styname=="Sign or Symptom") or (styname=="Virus")):
                        entity=entity_span,styname
                        print(entity)
                        #print(type(entity))
                        #liste_entities.append(entity)
                        #print(liste_entities)
                        
            open(filename,'a',encoding="utf-8").write(str(entity)) #les articles sont tagués par spacy et écrits à la fin des fichiers 
          
            print(entity_span,styname)
  except:
    print(entity_span,"Entity")"""